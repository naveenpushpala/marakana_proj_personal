package com.marakana.contacts.repositories;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.marakana.contacts.entities.Address;

public class AddressRepository {

	private DataSource ds;

	public AddressRepository() {
		try {
			Context context = new InitialContext();
			try{
				ds=(DataSource) context.lookup("java:comp/env/jdbc/trainingdb");
			}
			finally{
				context.close();
			}
		
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			throw new RuntimeException(e);
		}
	}

	
	public void init() throws SQLException {
		Connection connection = ds.getConnection();

		try {
			Statement statement = connection.createStatement();
		try{
			
			String sql = "create table address(id integer generated by default as identity primary key,street varchar(20),city varchar(20),state varchar(20),zip varchar(20))";	
			statement.execute(sql);
		}
		finally{
			statement.close();
		}
		}
		
		finally{
			connection.close();
		}
	}

	public Address find(long id) throws SQLException{

	Connection connection= ds.getConnection();
	try{
		Statement statement =connection.createStatement();
		
		try{
		ResultSet results = statement.executeQuery("select * from address where id = " + id);
		if(!results.next()){
			return null;
		}
		else
		{return unmarshal(results);}
		
		
		}
		finally{
			statement.close();
		}
		}
	finally{
		connection.close();
	}
	}

	private Address unmarshal(ResultSet resultSet) throws SQLException {
		Address address = new Address();
		address.setId(resultSet.getLong("id"));
		address.setStreet(resultSet.getString("street"));
		address.setCity(resultSet.getString("city"));
		address.setState(resultSet.getString("state"));
		address.setZip(resultSet.getString("zip"));
		return address;
	}

	public void create(Address address) throws SQLException {
		
		Connection connection= ds.getConnection();
		try{
			Statement statement =connection.createStatement();
			
			try{
			
				statement.executeUpdate("Insert into address(street,state,city,zip)values('"+address.getStreet()+ "','" +address.getState() +"','" +address.getCity() +"','"+address.getZip()+ "')",Statement.RETURN_GENERATED_KEYS);				
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try {
					if (generatedKeys.next())
						
						address.setId(generatedKeys.getLong("id"));
				} finally {
					generatedKeys.close();
				}
			}
			finally{
				statement.close();
			}
			}
		finally{
			connection.close();
		}
		}
	
	public void update(Address address) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();

			try {

				statement.executeUpdate("update "
						+ "address set street= '" + address.getStreet() + "', city='"
						+ address.getCity() + "', state='" + address.getState() + "',zip='" + address.getZip()
						+ "' where id= " + address.getId());
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try {
					if (generatedKeys.next())

						address.setId(generatedKeys.getLong("id"));
				} finally {
					generatedKeys.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}
	
	public void delete(Address address) throws SQLException {
		Connection connection = ds.getConnection();
		try{
		Statement statement = connection.createStatement();
		try {
			statement.executeUpdate("delete from address where id= '" +address.getId() +"'");
			} finally {
				statement.close();
			}
		}
		 finally {
			connection.close();
		}
	}
}

